Arch :
------

LL API : ESP32 comm
ML API : Joint / Kinematic / todo : J, GRF, Fusion Filter
HL API : Pose (height, pitch, roll, yaw) & Gait (vx,vy,w) & States (REST, STANDBY..) + Odom

Tests :
-------

# T03. UDP comm performance on RPi4 (ping/pong two processes)
# T04b. (FK/IK/J) x 4 legs cycle performance on RPi4 using CPP
# T05. ROS2 comm performance on RPi4 (Topic Hz)
# T06. Compare foot trajectory at 200Hz and 500Hz, based on IK PY/CPP
# T09. Tester performances sous ESP32 avec monitor.

# T10. Tester performances Gait/IK et Gait/IK/ESP32 en CPP

Tasks :
-------

W09. Port IK on ESP32 and speed test (1000Hz) ?
W08. IMU fusion filter

W07. TROT trajectory impl. and maximum BW measure
W09. ODOM from gait
W10. Height and CoM dynamic control
W11. Overlay and period dynamic control
W12. Servo scale (pos/angle) check and adjust scale
W13. More real-time reliable ESP32 API (time-out occur from time to time)

W03b. J CPP impl. ==> ML API

ESP32 FW :
----------

E01. Manual fine-tune calibration data (CLI R/W access to calibration data)




Info :
------

https://github.com/cbecker/openahrs

	openAHRS Open Source IMU / AHRS

towr is a light-weight and extensible C++ library for trajectory optimization for legged robots.

	https://github.com/ethz-adrl/towr

°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

Done !
------

W01. IK documentation (jupyter lab)
W02. IK Python impl.  (jupyter lab)
W02b. IK Python impl. (explicit method) (jupyter lab)
W03. FK/IK CPP impl. ==> ML API
W05. STAND-BY pose impl.
W04. REST pose impl.
W06. CIRCLE trajectory impl. and maximum BW measure

T01. ESP32 LL API performances

 	 200Hz min     (dt = 5ms)
	 500Hz nominal (dt = 2ms)
	1000Hz target  (dt = 1ms) 
 	Result :
		1000x control-feedback delay:640ms (erros count:0)
		control-feedback frequency:1562.5 Hz

# T02. (FK/IK/J) x 4 legs cycle performance on RPi4 using Py

 	 200Hz min     (dt = 5ms)
	 500Hz nominal (dt = 2ms)
	1000Hz target  (dt = 1ms) 
	Result IK only :
		1000x four-leg FK+IK delay:3679ms
		four-leg FK+IK frequency:271.8129926610492Hz
	Result FK+IK only :
		1000x four-leg FK+IK delay:5092ms
		four-leg FK+IK frequency:196.38648860958367Hz

# T04a. (FK/IK) x 4 legs cycle performance on RPi4 using CPP
 	 200Hz min     (dt = 5ms)
	 500Hz nominal (dt = 2ms)
	1000Hz target  (dt = 1ms) 
	Result FK+IK only (-O2) :
		1000x fk-ik delay:2ms (count:1000)
		fk-ik frequency:500000 Hz
	Result FK+IK only (no optimization) :
		1000x fk-ik delay:24ms (count:1000)
		fk-ik frequency:41666.7 Hz

# T07. (pose + IK + esp32) cycle performance
 	 200Hz min     (dt = 5ms)
	 500Hz nominal (dt = 2ms)
	1000Hz target  (dt = 1ms) 
	Result (-O2) :
		1000x ik-bus delay:642ms (erros count:0)
		ik-bus frequency:1557.63 Hz

# T08. Circle BW performance
	radius = 0.020 m
	* period = 1.0s ==> OK
	* period = 0.5s ==> OK
	* period = 0.33s ==> OK
	* period = 0.25s ==> OK
	--- Limit ---
	* period = 0.20s ==> X-tracking GOOD, Z-tracking ALTERED
