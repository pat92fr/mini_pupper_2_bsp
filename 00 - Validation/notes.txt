Arch :
------

LL API : joint position to ESP32 comm

ML API : Foot position to joint angle to joint position, fusion filter, servo direction and mapping

HL API : velocities & attitude & state, gait to foot position, odom

Tests :
-------

# T02. (FK/IK/J) x 4 legs cycle performance on RPi4 using Py
# T03. UDP comm performance on RPi4 (ping/pong two processes)
# T04. (FK/IK/J) x 4 legs cycle performance on RPi4 using CPP
# T05. ROS2 comm performance on RPi4 (Topic Hz)

Tasks :
-------

W03. FK/IK/J CPP impl. ==> ML API
W04. REST pose impl.
W05. STAND-BY pose impl.
W06. CIRCLE trajectory impl. and maximum BW measure
W07. TROT trajectory impl. and maximum BW measure
W08. IMU fusion filter
W09. ODOM from gait
W10. Height and CoM control
W11. Overlay and period control
W12. Servo scale (pos/angle) check and adjust scale

ESP32 FW :
----------

E01. Manual fine-tune calibration data (CLI R/W access to calibration data)




Info :
------

https://github.com/cbecker/openahrs

	openAHRS Open Source IMU / AHRS

towr is a light-weight and extensible C++ library for trajectory optimization for legged robots.

	https://github.com/ethz-adrl/towr

°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

Done !
------

W01. IK documentation (jupyter lab)
W02. IK Python impl.  (jupyter lab)
W02b. IK Python impl. (explicit method) (jupyter lab)
T01. ESP32 LL API performances

 	 200Hz min     (dt = 5ms)
	 500Hz nominal (dt = 2ms)
	1000Hz target  (dt = 1ms) 
	measured ***** 1500Hz

 
